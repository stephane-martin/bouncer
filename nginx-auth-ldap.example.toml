# Multiple LDAP servers can be defined in [[ldap]] sections
[[ldap]]
# LDAP directory host (default "127.0.0.1")
host = "127.0.0.1"
# LDAP directory port (default 389)
port = 389
# How to perform the LDAP authentication
# "search" or "directbind"

# directbind: the user credentials are directly used to perform a bind on the directory
# in that case you must provide 'user_dn_template' to match the username with a DN to bind with

# search: first we perform a bind on the LDAP directory. Then the matching user
# is searched in a LDAP subtree. If the matching user is found in LDAP, we
# perform a second Bind to check the user's credentials
# you must provide :
# - bind_dn -> the DN used to perform the first bind
# - bind_password -> the password to perform the first bind
# - user_search_filter -> the LDAP filter to find the user in LDAP

# search (default auth_type is "directbind")
auth_type = "search"
# default ""
bind_dn = "uid=nginx,ou=technicalUsers,dc=example,dc=org"
# default ""
bind_password = "BLABLABLA"
# default "(uid=%s)"
user_search_filter = "(&(businessCategory=BLA)(uid=%s))"
# default "ou=users,dc=example,dc=org"
user_search_base = "ou=users,dc=example,dc=org"

# OR directbind
auth_type = "directbind"
# default "uid=%s,ou=users,dc=example,dc=org"
user_dn_template = "uid=%s,ou=users,dc=example,dc=org"

# Whether to use TLS to connect to LDAP
# Can be 'none', 'starttls' or 'tls'
# If not 'none', provide:
# - certificate_authority: the path to the certificate authority used to verify
#                          the LDAP server certificate
# - certificate: optional client certificate to do client authentication
# - key: optional client private key to do client authentication
tls_type = "none" # (default "none")
certificate_authority = "" # (default "")
certificate = "" # (default "")
key = "" # (default "")
# if you don't want to check the LDAP server certificate, set to true
# in that case you don't need to provide 'certificate_authority'
insecure = false # default 'false'

# [[ldap]]
# ...
# you can provide multiple LDAP configurations. The authentications will be
# randomly balanced between them.

[defaultldap]
# Default parameters that would apply to all the defined LDAP servers
port = 636
insecure = true

[api]
# bind address for the API service
bind_addr = "127.0.0.1"
# the API port
port = 8081

[http]
# the bind address for the HTTP service (0.0.0.0 for all interfaces)
bind_addr = "0.0.0.0" # default "0.0.0.0"
# the HTTP port
port = 8080 # default 8080
# the HTTP Basic Auth realm
realm = "Example realm" # default "Example realm"
# The header name that Nginx uses to forward the user's credenials
authorization_header = "Authorization" # default "Authorization"
# The header name to send to the final client, when credentials are not provided
authenticate_header = "WWW-Authenticate" # default "WWW-Authenticate"
# The header name that Nginx uses to forward the requested URI (used in logging)
original_uri_header = "X-Original-Uri" # default "X-Original-Uri" (beware of golang upcase normalization...)
# When the authentication fails, force the client to wait N seconds (put 0 to disable)
failed_auth_delay_seconds = 2 # default 2
# Timeout for the HTTP shutdown, in seconds
shutdown_timeout_seconds = 2 # default 2
# Whether to use HTTPS
https = false # default false
# if using HTTPS, provide the path to the certificate and the path to the private_key
certificate = "" # default ""
key = "" # default ""

[cache]
# Authorization header is sent by the browser with each request.
# The LDAP bind may be quite long (for example if there is some latency between
# nginx and the LDAP server).
# nginx-auth-ldap can cache successful authentication, so that the LDAP directory
# is not requested each time a request arrives
# A successful authentication is cached for N seconds
# put to 0 to disable caching
expires_seconds = 300 # default 300

# nginx-auth-ldap caches the Authorization header. It would inappropriate to
# store users passwords in memory in cleartext. Instead, we cache a HMAC of
# the Authorization header.
# 'secret' is the secret used by the HMAC
# if 'secret' is empty, a random secret will be generated
secret = "" # default ""

[redis]
# if enabled, we will log the incoming requests in redis to be able to provide
# statistics. Default `false`.
enabled = false
# redis host
host = "127.0.0.1"
# redis port
port = 6379
# redis database number
database = 0
# redis password (leave empty for anonymous)
password = ""
# nginx-auth-ldap uses go-redis with a pool of connections to Redis. Size of
# the pool.
poolsize = 10
# each incoming request is logged in a sorted set in redis.
# if expires_seconds is > 0, requests older than that number of seconds will
# be purged
expires_seconds = 86400

